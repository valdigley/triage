PROMPT PARA AUTENTICA√á√ÉO COMPARTILHADA - SISTEMAS SEM LOGIN EXISTENTE

Adicione autentica√ß√£o compartilhada a este sistema que atualmente n√£o possui login. O sistema deve verificar automaticamente se o usu√°rio est√° logado no site principal https://fotografo.site/ e permitir acesso direto ou redirecionar conforme necess√°rio.

IMPORTANTE: Esta solu√ß√£o funciona entre dom√≠nios diferentes (ex: drive.fotografo.site, triagem.fotografo.site) usando tokens via URL e verifica√ß√£o no banco Supabase compartilhado.
IMPLEMENTAR:

1. ESTRUTURA DE BANCO (se n√£o existir):

```sql
/*
  # Sistema de Sess√µes Compartilhadas

  1. Nova Tabela
    - `user_sessions` - Controla sess√µes ativas entre sistemas
      - `id` (uuid, primary key)
      - `user_id` (uuid, refer√™ncia ao usu√°rio)
      - `session_token` (text, √∫nico)
      - `is_active` (boolean, default true)
      - `expires_at` (timestamp, 24h de validade)
      - `last_activity` (timestamp)
      - `ip_address` (text, para auditoria)
      - `user_agent` (text, para auditoria)
      - `created_at` e `updated_at` (timestamps)

  2. Seguran√ßa
    - Enable RLS na tabela user_sessions
    - Pol√≠ticas para usu√°rios autenticados gerenciarem suas sess√µes
    - Pol√≠tica p√∫blica para verifica√ß√£o de sess√µes ativas

  3. Performance
    - √çndices para session_token, user_id, expires_at
    - Trigger para atualizar updated_at
*/

CREATE TABLE IF NOT EXISTS user_sessions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  session_token text UNIQUE NOT NULL,
  is_active boolean DEFAULT true,
  expires_at timestamptz NOT NULL,
  last_activity timestamptz DEFAULT now(),
  ip_address text,
  user_agent text,
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now()
);

ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can manage their own sessions"
  ON user_sessions
  FOR ALL
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Public can read active sessions for verification"
  ON user_sessions
  FOR SELECT
  TO anon
  USING (is_active = true AND expires_at > now());

-- √çndices para performance
CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON user_sessions (session_token);
CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions (user_id);
CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions (expires_at);
CREATE INDEX IF NOT EXISTS idx_user_sessions_active ON user_sessions (is_active);

-- Trigger para updated_at
CREATE OR REPLACE FUNCTION update_user_sessions_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_user_sessions_updated_at
  BEFORE UPDATE ON user_sessions
  FOR EACH ROW
  EXECUTE FUNCTION update_user_sessions_updated_at();
```

2. HOOK DE VERIFICA√á√ÉO DE SESS√ÉO:

```typescript
// src/hooks/useSessionVerification.ts
import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';

interface SessionData {
  user_id: string;
  session_token: string;
  expires_at: string;
  last_activity: string;
}

export function useSessionVerification() {
  const [isVerifying, setIsVerifying] = useState(true);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [sessionData, setSessionData] = useState<SessionData | null>(null);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    verifySession();
  }, []);

  const verifySession = async () => {
    try {
      setIsVerifying(true);
      setError(null);

      // Verificar se h√° um token de sess√£o compartilhada nos par√¢metros da URL ou localStorage
      const urlParams = new URLSearchParams(window.location.search);
      const sessionToken = urlParams.get('session_token') || localStorage.getItem('shared_session_token');

      if (!sessionToken) {
        console.log('‚ÑπÔ∏è Nenhum token de sess√£o encontrado');
        setIsAuthenticated(false);
        setIsVerifying(false);
        return;
      }

      console.log('üîç Verificando token de sess√£o compartilhada...');

      // Verificar se a sess√£o √© v√°lida na tabela user_sessions
      const { data: sessionRecord, error: sessionCheckError } = await supabase
        .from('user_sessions')
        .select('*')
        .eq('session_token', sessionToken)
        .eq('is_active', true)
        .gt('expires_at', new Date().toISOString())
        .single();

      if (sessionCheckError || !sessionRecord) {
        console.log('‚ùå Sess√£o inv√°lida ou expirada');
        localStorage.removeItem('shared_session_token');
        setIsAuthenticated(false);
        setIsVerifying(false);
        return;
      }

      console.log('‚úÖ Sess√£o v√°lida encontrada');

      // Atualizar √∫ltima atividade
      await supabase
        .from('user_sessions')
        .update({ 
          last_activity: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', sessionRecord.id);

      // Salvar token no localStorage para pr√≥ximas visitas
      localStorage.setItem('shared_session_token', sessionToken);
      
      setSessionData(sessionRecord);
      setIsAuthenticated(true);
      
      // Remover token da URL se estiver presente
      if (urlParams.get('session_token')) {
        const newUrl = new URL(window.location.href);
        newUrl.searchParams.delete('session_token');
        window.history.replaceState({}, '', newUrl.toString());
      }

    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o de sess√£o:', error);
      setError(error instanceof Error ? error.message : 'Erro na verifica√ß√£o de sess√£o');
      setIsAuthenticated(false);
    } finally {
      setIsVerifying(false);
    }
  };

  const createSharedSession = async (userId: string): Promise<string | null> => {
    try {
      const sessionToken = `session_${Date.now()}_${Math.random().toString(36).substring(2)}`;
      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);

      const ipAddress = await fetch('https://api.ipify.org?format=json')
        .then(res => res.json())
        .then(data => data.ip)
        .catch(() => 'unknown');

      const userAgent = navigator.userAgent;

      const { data, error } = await supabase
        .from('user_sessions')
        .insert({
          user_id: userId,
          session_token: sessionToken,
          is_active: true,
          expires_at: expiresAt.toISOString(),
          ip_address: ipAddress,
          user_agent: userAgent
        })
        .select()
        .single();

      if (error) throw error;

      console.log('‚úÖ Sess√£o compartilhada criada:', sessionToken);
      return sessionToken;

    } catch (error) {
      console.error('‚ùå Erro ao criar sess√£o compartilhada:', error);
      return null;
    }
  };

  const invalidateSession = async (sessionToken?: string) => {
    try {
      const tokenToInvalidate = sessionToken || localStorage.getItem('shared_session_token');
      
      if (tokenToInvalidate) {
        await supabase
          .from('user_sessions')
          .update({ 
            is_active: false,
            updated_at: new Date().toISOString()
          })
          .eq('session_token', tokenToInvalidate);

        localStorage.removeItem('shared_session_token');
      }

      setIsAuthenticated(false);
      setSessionData(null);
    } catch (error) {
      console.error('‚ùå Erro ao invalidar sess√£o:', error);
    }
  };

  return {
    isVerifying,
    isAuthenticated,
    sessionData,
    error,
    createSharedSession,
    invalidateSession,
    refreshSession: verifySession
  };
}
```

3. COMPONENTE DE REDIRECIONAMENTO:

```typescript
// src/components/Auth/SessionRedirect.tsx
import React from 'react';
import { ExternalLink, Shield } from 'lucide-react';

export function SessionRedirect() {
  const redirectToMainSite = () => {
    window.location.href = 'https://fotografo.site/';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden">
        <div className="bg-gradient-to-r from-gray-800 to-gray-900 text-white p-8 text-center">
          <h1 className="text-2xl font-bold">Sistema Protegido</h1>
          <p className="text-gray-300 mt-1">Acesso via fotografo.site</p>
        </div>

        <div className="p-8 text-center space-y-6">
          <div className="flex justify-center mb-4">
            <div className="bg-orange-100 dark:bg-orange-900/20 p-4 rounded-full">
              <Shield className="h-8 w-8 text-orange-600" />
            </div>
          </div>
          
          <div>
            <h2 className="text-xl font-semibold text-gray-800 dark:text-white mb-2">
              Acesso Restrito
            </h2>
            <p className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed">
              Para acessar este sistema, voc√™ precisa estar logado no site principal.
            </p>
          </div>

          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
            <h3 className="text-sm font-medium text-blue-800 dark:text-blue-200 mb-2">
              Como acessar:
            </h3>
            <ol className="text-xs text-blue-700 dark:text-blue-300 text-left space-y-1">
              <li>1. Fa√ßa login em fotografo.site</li>
              <li>2. Acesse o menu de sistemas</li>
              <li>3. Clique no sistema desejado</li>
              <li>4. Voc√™ ser√° redirecionado automaticamente</li>
            </ol>
          </div>

          <button
            onClick={redirectToMainSite}
            className="w-full bg-purple-600 text-white py-3 px-6 rounded-lg hover:bg-purple-700 transition-colors flex items-center justify-center space-x-2"
          >
            <ExternalLink className="h-5 w-5" />
            <span>Ir para fotografo.site</span>
          </button>

          <p className="text-xs text-gray-500 dark:text-gray-400">
            Sistema de seguran√ßa integrado
          </p>
        </div>
      </div>
    </div>
  );
}
```

4. MODIFICAR APP PRINCIPAL:

```typescript
// Modificar src/App.tsx para incluir verifica√ß√£o
import { useSessionVerification } from './hooks/useSessionVerification';
import { SessionRedirect } from './components/Auth/SessionRedirect';

function App() {
  const { isVerifying, isAuthenticated } = useSessionVerification();

  if (isVerifying) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Verificando acesso...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <SessionRedirect />;
  }

  // TODO: Manter todo o conte√∫do original do sistema aqui
  return (
    <div>
      {/* Conte√∫do existente do sistema permanece inalterado */}
    </div>
  );
}
```

5. UTILIT√ÅRIOS DE SESS√ÉO:

```typescript
// src/utils/sessionManager.ts
import { supabase } from '../lib/supabase';

export async function createSharedSession(userId: string): Promise<string | null> {
  try {
    const sessionToken = `session_${Date.now()}_${Math.random().toString(36).substring(2)}`;
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);

    const ipAddress = await fetch('https://api.ipify.org?format=json')
      .then(res => res.json())
      .then(data => data.ip)
      .catch(() => 'unknown');

    const userAgent = navigator.userAgent;

    // Invalidar sess√µes antigas do mesmo usu√°rio
    await supabase
      .from('user_sessions')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', userId)
      .eq('is_active', true);

    // Criar nova sess√£o
    const { data, error } = await supabase
      .from('user_sessions')
      .insert({
        user_id: userId,
        session_token: sessionToken,
        is_active: true,
        expires_at: expiresAt.toISOString(),
        ip_address: ipAddress,
        user_agent: userAgent
      })
      .select()
      .single();

    if (error) throw error;

    console.log('‚úÖ Sess√£o compartilhada criada:', sessionToken);
    return sessionToken;

  } catch (error) {
    console.error('‚ùå Erro ao criar sess√£o compartilhada:', error);
    return null;
  }
}

export function generateSystemUrl(sessionToken: string, systemUrl: string): string {
  const url = new URL(systemUrl);
  url.searchParams.set('session_token', sessionToken);
  return url.toString();
}

/**
 * Fun√ß√£o gen√©rica para qualquer sistema
 */
export function generateSystemUrl(sessionToken: string, systemName: string): string {
  const systemUrls = {
    'triagem': 'https://triagem.fotografo.site',
    'contrato': 'https://contrato.fotografo.site',
    'drive': 'https://drive.fotografo.site',
    'formatura': 'https://formatura.fotografo.site'
  };
  
  const baseUrl = systemUrls[systemName];
  if (!baseUrl) {
    console.error('Sistema n√£o encontrado:', systemName);
    return null;
  }
  
  const url = new URL(baseUrl);
  url.searchParams.set('session_token', sessionToken);
  return url.toString();
}

export async function cleanupExpiredSessions(): Promise<number> {
  try {
    const { data, error } = await supabase
      .from('user_sessions')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .lt('expires_at', new Date().toISOString())
      .eq('is_active', true)
      .select('id');

    if (error) throw error;

    const cleanedCount = data?.length || 0;
    console.log(`üßπ ${cleanedCount} sess√µes expiradas limpas`);
    return cleanedCount;

  } catch (error) {
    console.error('‚ùå Erro ao limpar sess√µes expiradas:', error);
    return 0;
  }
}
```

6. INTEGRA√á√ÉO NO SITE PRINCIPAL (https://fotografo.site/):

```javascript
// Para ser usado no site principal ap√≥s login bem-sucedido:
import { createSharedSession, generateSystemUrl } from './utils/sessionManager';

// Exemplo de uso:
async function redirectToSystem(systemName) {
  const sessionToken = await createSharedSession(user.id);
  
  const systemUrl = generateSystemUrl(sessionToken, systemName);
  window.location.href = systemUrl;
}

// Exemplo de menu no site principal:
<div className="grid grid-cols-2 gap-4">
  <button onClick={() => redirectToSystem('triagem')}>
    üì∏ Triagem
  </button>
  <button onClick={() => redirectToSystem('contrato')}>
    üìã Contratos
  </button>
  <button onClick={() => redirectToSystem('drive')}>
    üìÅ Drive
  </button>
  <button onClick={() => redirectToSystem('formatura')}>
    üéì Formatura
  </button>
</div>
```

7. CARACTER√çSTICAS DO SISTEMA:

‚úÖ Plug-and-play - Funciona em qualquer sistema Bolt
‚úÖ N√£o interfere no c√≥digo existente
‚úÖ Seguran√ßa robusta com RLS
‚úÖ Tokens √∫nicos com expira√ß√£o autom√°tica
‚úÖ Limpeza autom√°tica de sess√µes expiradas
‚úÖ Rastreamento de atividade para auditoria
‚úÖ Fallback gracioso para falhas
‚úÖ Suporte a m√∫ltiplos sistemas
‚úÖ Design responsivo e acess√≠vel

SOLU√á√ÉO PARA VPS/DOM√çNIOS DIFERENTES:
‚úÖ Funciona entre subdom√≠nios (drive.fotografo.site ‚Üî triagem.fotografo.site)
‚úÖ Token passado via URL (n√£o depende de localStorage entre dom√≠nios)
‚úÖ Verifica√ß√£o no banco Supabase compartilhado
‚úÖ Limpeza autom√°tica de sess√µes expiradas
‚úÖ Fallback robusto para falhas de rede

8. COMPORTAMENTO ESPERADO:

- Usu√°rio logado no site principal ‚Üí Acesso direto ao sistema
- Usu√°rio n√£o logado ‚Üí Tela explicativa com redirecionamento
- Sess√£o expirada ‚Üí Limpeza autom√°tica e redirecionamento
- Falha na verifica√ß√£o ‚Üí Tela de redirecionamento
- Token na URL ‚Üí Salvo no localStorage para pr√≥ximas visitas

FLUXO EM PRODU√á√ÉO:
1. Usu√°rio faz login em https://fotografo.site/
2. Site principal cria sess√£o na tabela user_sessions
3. Usu√°rio clica em qualquer sistema ‚Üí Redireciona para URL com token
4. Sistema de destino verifica token no banco Supabase compartilhado
5. Se v√°lido ‚Üí Acesso direto ao sistema
6. Se inv√°lido ‚Üí Tela de redirecionamento para fotografo.site

9. SEGURAN√áA:

- Tokens √∫nicos e n√£o reutiliz√°veis
- Expira√ß√£o autom√°tica em 24 horas
- Invalida√ß√£o de sess√µes antigas
- RLS protege dados de sess√£o
- Rastreamento de IP e User Agent
- Limpeza autom√°tica de dados expirados

SEGURAN√áA ENTRE DOM√çNIOS:
- Token √∫nico por sess√£o (n√£o reutiliz√°vel)
- Expira√ß√£o autom√°tica em 24 horas
- Verifica√ß√£o de IP para detectar mudan√ßas suspeitas
- Invalida√ß√£o autom√°tica de sess√µes antigas
- Logs detalhados para auditoria

10. INSTALA√á√ÉO:

1. Cole este prompt no projeto Bolt
2. Substitua "Sistema Protegido" pelo nome do seu sistema
3. Configure as vari√°veis de ambiente do Supabase
4. Teste o fluxo de autentica√ß√£o

CONFIGURA√á√ÉO PARA VPS:
1. Todos os sistemas devem usar o MESMO projeto Supabase
2. Mesmas vari√°veis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY
3. No site principal (fotografo.site), implementar as fun√ß√µes de cria√ß√£o de sess√£o
4. Testar o fluxo: login ‚Üí criar sess√£o ‚Üí redirecionar com token

EXEMPLO DE IMPLEMENTA√á√ÉO NO SITE PRINCIPAL:
```javascript
// No https://fotografo.site/ ap√≥s login bem-sucedido:
async function createAndRedirect(userId, systemName) {
  try {
    // Criar sess√£o compartilhada
    const sessionToken = await createSharedSession(userId);
    
    if (sessionToken) {
      const redirectUrl = generateSystemUrl(sessionToken, systemName);
      window.location.href = redirectUrl;
    } else {
      alert('Erro ao criar sess√£o. Tente novamente.');
    }
  } catch (error) {
    console.error('Erro:', error);
    alert('Erro ao acessar sistema. Tente novamente.');
  }
}

// Exemplo de menu completo:
const systems = [
  { id: 'triagem', name: 'Triagem', icon: 'üì∏' },
  { id: 'contrato', name: 'Contratos', icon: 'üìã' },
  { id: 'drive', name: 'Drive', icon: 'üìÅ' },
  { id: 'formatura', name: 'Formatura', icon: 'üéì' }
];

systems.forEach(system => {
  // Criar bot√µes que chamam createAndRedirect(user.id, system.id)
});
```

O sistema funcionar√° como uma camada de prote√ß√£o transparente - se o usu√°rio estiver logado no site principal, ele nem perceber√° que existe autentica√ß√£o. Se n√£o estiver, ser√° redirecionado educadamente.

SISTEMAS SUPORTADOS:
- üì∏ **triagem.fotografo.site** - Sele√ß√£o de fotos
- üìã **contrato.fotografo.site** - Gest√£o de contratos  
- üìÅ **drive.fotografo.site** - Gerenciamento de arquivos
- üéì **formatura.fotografo.site** - Sess√µes de formatura
- üè† **fotografo.site** - Site principal (hub central)

RESULTADO: 
- ‚úÖ Sistema atual permanece 100% intacto
- ‚úÖ Prote√ß√£o de acesso autom√°tica entre dom√≠nios diferentes
- ‚úÖ Experi√™ncia fluida entre sistemas em produ√ß√£o
- ‚úÖ Fallback seguro para usu√°rios n√£o autenticados
- ‚úÖ Funciona em VPS com subdom√≠nios separados
- ‚úÖ N√£o depende de localStorage entre dom√≠nios
- ‚úÖ Verifica√ß√£o robusta via banco Supabase compartilhado