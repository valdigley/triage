import { supabase } from '../lib/supabase';

export interface SessionInfo {
  sessionToken: string;
  userId: string;
  expiresAt: string;
}

/**
 * Fun√ß√£o para ser chamada pelo site principal (fotografo.site) ap√≥s login
 * Cria uma sess√£o compartilhada e retorna o token
 */
export async function createSharedSession(userId: string): Promise<string | null> {
  try {
    // Gerar token √∫nico e seguro
    const sessionToken = `session_${Date.now()}_${Math.random().toString(36).substring(2)}_${Math.random().toString(36).substring(2)}`;
    
    // Definir expira√ß√£o (24 horas)
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000);

    // Obter informa√ß√µes do navegador para seguran√ßa
    let ipAddress = 'unknown';
    try {
      const ipResponse = await fetch('https://api.ipify.org?format=json');
      const ipData = await ipResponse.json();
      ipAddress = ipData.ip;
    } catch (error) {
      console.warn('N√£o foi poss√≠vel obter IP:', error);
    }

    const userAgent = navigator.userAgent;

    // Invalidar sess√µes antigas do mesmo usu√°rio
    await supabase
      .from('user_sessions')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', userId)
      .eq('is_active', true);

    // Criar nova sess√£o
    const { data, error } = await supabase
      .from('user_sessions')
      .insert({
        user_id: userId,
        session_token: sessionToken,
        is_active: true,
        expires_at: expiresAt.toISOString(),
        ip_address: ipAddress,
        user_agent: userAgent
      })
      .select()
      .single();

    if (error) throw error;

    console.log('‚úÖ Sess√£o compartilhada criada:', sessionToken);
    return sessionToken;

  } catch (error) {
    console.error('‚ùå Erro ao criar sess√£o compartilhada:', error);
    return null;
  }
}

/**
 * Fun√ß√£o para verificar se uma sess√£o √© v√°lida
 */
export async function verifySharedSession(sessionToken: string): Promise<SessionInfo | null> {
  try {
    const { data, error } = await supabase
      .from('user_sessions')
      .select('*')
      .eq('session_token', sessionToken)
      .eq('is_active', true)
      .gt('expires_at', new Date().toISOString())
      .single();

    if (error || !data) {
      return null;
    }

    // Atualizar √∫ltima atividade
    await supabase
      .from('user_sessions')
      .update({ 
        last_activity: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', data.id);

    return {
      sessionToken: data.session_token,
      userId: data.user_id,
      expiresAt: data.expires_at
    };

  } catch (error) {
    console.error('‚ùå Erro ao verificar sess√£o:', error);
    return null;
  }
}

/**
 * Fun√ß√£o para invalidar uma sess√£o
 */
export async function invalidateSharedSession(sessionToken: string): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('user_sessions')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('session_token', sessionToken);

    if (error) throw error;

    console.log('‚úÖ Sess√£o invalidada:', sessionToken);
    return true;

  } catch (error) {
    console.error('‚ùå Erro ao invalidar sess√£o:', error);
    return false;
  }
}

/**
 * Fun√ß√£o para limpar sess√µes expiradas (pode ser chamada periodicamente)
 */
export async function cleanupExpiredSessions(): Promise<number> {
  try {
    const { data, error } = await supabase
      .from('user_sessions')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .lt('expires_at', new Date().toISOString())
      .eq('is_active', true)
      .select('id');

    if (error) throw error;

    const cleanedCount = data?.length || 0;
    if (cleanedCount > 0) {
      console.log(`üßπ ${cleanedCount} sess√µes expiradas limpas`);
    }
    return cleanedCount;

  } catch (error) {
    console.error('‚ùå Erro ao limpar sess√µes expiradas:', error);
    return 0;
  }
}

/**
 * Fun√ß√£o para gerar URL de redirecionamento com token de sess√£o
 * Para ser usada pelo site principal - FUNCIONA ENTRE DOM√çNIOS DIFERENTES
 */
export function generateSystemUrl(sessionToken: string, systemUrl: string): string {
  const url = new URL(systemUrl);
  url.searchParams.set('session_token', sessionToken);
  return url.toString();
}

/**
 * Fun√ß√£o espec√≠fica para o sistema de triagem (compatibilidade)
 */
export function generateTriageUrl(sessionToken: string, baseUrl: string = 'https://triagem.fotografo.site/'): string {
  const url = new URL(baseUrl);
  url.searchParams.set('session_token', sessionToken);
  return url.toString();
}

/**
 * Fun√ß√£o para verificar se h√° sess√µes ativas de um usu√°rio espec√≠fico
 * √ötil para o site principal verificar se pode fazer redirecionamento direto
 */
export async function hasActiveSession(userId: string): Promise<boolean> {
  try {
    const { data, error } = await supabase
      .from('user_sessions')
      .select('id')
      .eq('user_id', userId)
      .eq('is_active', true)
      .gt('expires_at', new Date().toISOString())
      .limit(1);
    if (error) throw error;
    return (data?.length || 0) > 0;
  } catch (error) {
    console.error('‚ùå Erro ao verificar sess√µes ativas:', error);
    return false;
  }
}